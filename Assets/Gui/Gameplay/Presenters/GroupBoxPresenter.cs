using System;
using System.Collections.Generic;
using Gui.Gameplay.Models;
using Gui.Gameplay.Presenters.Cells;
using Gui.ScriptableObjects;
using UnityEngine;

namespace Gui.Gameplay.Presenters
{
	public class GroupBoxPresenter : MonoBehaviour
	{
		[SerializeField] private RectTransform _holder;
		[SerializeField] private SudokuCellsSpawner _sudokuCellsSpawner;

		private ICellPresenter[,] _cellPresenters;

		public void Initialize(int rows, Action<int> onSelectCell, IReadOnlyList<CellDisplayData> cellDisplays)
		{
			float width = _holder.rect.width / rows;

			_cellPresenters = new ICellPresenter[rows, rows];

			for (int index = 0; index < cellDisplays.Count; index++)
			{
				CellDisplayData cellDisplayData = cellDisplays[index];
				int row = cellDisplayData.Row;
				int column = cellDisplayData.Column;

				ICellPresenter cellPresenter = _sudokuCellsSpawner.SpawnCell(cellDisplayData.AutoGeneratedCell, _holder);

				int index1 = index;
				cellPresenter.OnSpawned(cellDisplayData, () => onSelectCell.Invoke(index1));

				cellPresenter.RectTransform.name = $"[{row}, {column}]";

				SetupCellRect(cellPresenter.RectTransform, width, row, column);

				_cellPresenters[row, column] = cellPresenter;
			}
		}

		private void SetupCellRect(RectTransform cellPresenterRt, float width, int row, int column)
		{
			cellPresenterRt.anchorMin = new Vector2(0.5f, 1);
			cellPresenterRt.anchorMax = new Vector2(0.5f, 1);
			cellPresenterRt.sizeDelta = Vector2.one * width;

			float posX = column * width + (_holder.rect.x + width / 2);
			float posY = -(row * width + width / 2);
			cellPresenterRt.anchoredPosition = new Vector2(posX, posY);
		}
	}
}
