using System;
using System.Collections.Generic;
using Gui.Gameplay.Models;
using Gui.Gameplay.Presenters.Cells;
using Gui.ScriptableObjects;
using UnityEngine;

namespace Gui.Gameplay.Presenters
{
	public class BoardPanelComponent : MonoBehaviour
	{
		[SerializeField] private GroupBoxPresenter _groupBoxPresenter;
		[SerializeField] private RectTransform _holder;
		[SerializeField] private SudokuCellsSpawner _sudokuCellsSpawner;

		private ICellPresenter[,] _cellPresenters;

		public void Initialize(int rows,
			int subGridRows,
			int subGridColumns,
			List<SubBoxDisplay> subBoxDisplays,
			Action<int> onSelectCell,
			IReadOnlyList<CellDisplayData> cellDisplays)
		{
			/*float groupBoxWidth = _holder.rect.width / subGridRows;
			float groupBoxHeight = _holder.rect.height / subGridColumns;
			GroupBoxPresenter[,] groupBoxes = new GroupBoxPresenter[subGridColumns, subGridRows];

			for (int row = 0; row < subGridColumns; row++)
			{
				for (int column = 0; column < subGridRows; column++)
				{
					Debug.Log($"{row}, {column}");
					int index = BoardHelper.CalculateIndex(row, subGridRows, column);
					SubBoxDisplay subBoxDisplay = subBoxDisplays[index];

					GroupBoxPresenter groupBoxPresenter = Instantiate(_groupBoxPresenter, _holder);
					// ICellPresenter cellPresenter = _sudokuCellsSpawner.SpawnCell(cellDisplayData.AutoGeneratedCell, _holder);

					// int index1 = index;
					// cellPresenter.OnSpawned(cellDisplayData, () => onSelectCell.Invoke(index1));

					groupBoxPresenter.GetComponent<RectTransform>().name = $"[{row}, {column}]";

					SetupCellRect(groupBoxPresenter.GetComponent<RectTransform>(), groupBoxWidth, groupBoxHeight, row, column);

					// _cellPresenters[row, column] = cellPresenter;
				}
			}*/

			float width = _holder.rect.width / rows;
			float height = _holder.rect.width / rows;

			_cellPresenters = new ICellPresenter[rows, rows];

			for (int index = 0; index < cellDisplays.Count; index++)
			{
				CellDisplayData cellDisplayData = cellDisplays[index];
				int row = cellDisplayData.Row;
				int column = cellDisplayData.Column;

				ICellPresenter cellPresenter = _sudokuCellsSpawner.SpawnCell(cellDisplayData.AutoGeneratedCell, _holder);

				int index1 = index;
				cellPresenter.OnSpawned(cellDisplayData, () => onSelectCell.Invoke(index1));

				cellPresenter.RectTransform.name = $"[{row}, {column}]";

				SetupCellRect(cellPresenter.RectTransform, width, height, row, column);

				_cellPresenters[row, column] = cellPresenter;
			}
		}

		private void SetupCellRect(RectTransform cellPresenterRt, float width, float height, int row, int column)
		{
			cellPresenterRt.anchorMin = new Vector2(0.5f, 1);
			cellPresenterRt.anchorMax = new Vector2(0.5f, 1);
			// cellPresenterRt.sizeDelta = Vector2.one * width;
			cellPresenterRt.sizeDelta = new Vector2(width, height);

			float posX = column * width + (_holder.rect.x + width / 2);
			// float posY = -(row * width + width / 2);
			float posY = -(row * height + height / 2);
			cellPresenterRt.anchoredPosition = new Vector2(posX, posY);
		}

		public void Refresh(IEnumerable<CellDisplayData> cellDisplays)
		{
			foreach (CellDisplayData cellDisplayData in cellDisplays)
			{
				_cellPresenters[cellDisplayData.Row, cellDisplayData.Column].Refresh(cellDisplayData);
			}
		}
	}
}